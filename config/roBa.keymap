#define ZMK_POINTING_DEFAULT_SCRL_VAL 50

#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors/report_rate_limit.dtsi>
#include <input/processors/zmk-input-processor-keybind.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
    tapping-term-ms = <180>;
};

#define DEFAULT 0
#define FUNCTION 1
#define NUM 2
#define ARROW 3
#define MOUSE 4
#define MACRO 5
#define BLUETOOTH 6

&zip_temp_layer {
    require-prior-idle-ms = <200>;
    excluded-positions = <10 17 18 19 22 30 31 34>;
};

&trackball_listener {
    compatible = "zmk,input-listener";
    device = <&trackball>;
    input-processors = <
        &zip_report_rate_limit 15
    >;

    auto-mouse-layer {
        layers = <0 4>;
        input-processors = <&zip_temp_layer MOUSE 2000>;
        process-next;
    };

    scroller {
        layers = <3>;
        input-processors =
            <&zip_report_rate_limit 15>,
            <&zip_xy_scaler 1 30>,
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_to_scroll_mapper>;

        process-next;
    };

    ARROW {
        layers = <2>;
        input-processors = <&zip_xy_scaler 1 3>, <&zip_keybind_keys_custom>;

        process-next;
    };

    MACRO {
        layers = <5>;
        input-processors = <&zip_xy_scaler 1 2>;
        process-next;
    };
};

/ {
    input_processors {
        wheel_x_scaler: wheel_x_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_HWHEEL>;
            track-remainders;
        };

        zip_keybind_keys_custom: zip_keybind_keys {
            compatible = "zmk,input-processor-keybind";
            #input-processor-cells = <0>;
            track_remainders;
            bindings =
                <&kp RIGHT_ARROW>,
                <&kp LEFT_ARROW>,
                <&kp UP_ARROW>,
                <&kp DOWN_ARROW>;

            tick = <10>;
            wait-ms = <0>;
            tap-ms = <0>;

            //mode = <1>;
            //threshold = <8>;
            //max_threshold = <50>;
            //max_pending_activations = <8>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <10 11>;
        };

        ESC_sign {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        ctrlz {
            bindings = <&kp LC(Z)>;
            key-positions = <22 23>;
        };

        Alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <18 19>;
        };

        Alt09 {
            bindings = <&Alt09>;
            key-positions = <1 2>;
        };

        Alt08 {
            bindings = <&Alt08>;
            key-positions = <2 3>;
        };

        Alt07 {
            bindings = <&Alt07>;
            key-positions = <3 4>;
        };

        new_folder {
            bindings = <&new_folder>;
            key-positions = <26 27>;
        };

        TeamsMute {
            bindings = <&kp LS(LC(M))>;
            key-positions = <37 41>;
        };

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <39 40>;
        };

        TeamsMute2 {
            bindings = <&kp LS(LC(M))>;
            key-positions = <33 32>;
        };

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <28 29>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        KAOname: KAOname {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp KP_NUMBER_3 &kp KP_NUMBER_2 &kp KP_NUMBER_5 &kp KP_NUMBER_6 &kp KP_NUMBER_1 &kp KP_NUMBER_1 &kp TAB>;
            label = "KAONAME";
        };

        NewPass: NewPass {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none &kp SPACE>,
                <&macro_wait_time 100>,
                <&kp BACKSPACE &kp LS(T) &kp A &kp K &kp A &kp HASH &kp NUMBER_0 &kp NUMBER_5 &kp NUMBER_2 &kp NUMBER_2 &kp ENTER>;

            label = "NEWPASS";
            wait-ms = <30>;
            tap-ms = <30>;
        };

        Doubl_00: Doubl_00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp KP_NUMBER_0 &kp KP_NUMBER_0>;
            label = "DOUBL_00";
        };

        Win_right: Win_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LEFT_WIN &kp RIGHT>;

            label = "WIN_RIGHT";
        };

        Win_left: Win_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp LEFT>,
                <&macro_release>,
                <&kp LEFT_WIN &kp LEFT>;

            label = "WIN_LEFT";
        };

        Printscreen: Printscreen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp PRINTSCREEN>,
                <&macro_release>,
                <&kp LEFT_ALT &kp PRINTSCREEN>;

            label = "PRINTSCREEN";
        };

        Win_up: Win_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp LEFT_WIN &kp UP_ARROW>;

            label = "WIN_UP";
        };

        Win_down: Win_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp DOWN_ARROW>,
                <&macro_release>,
                <&kp LEFT_WIN &kp DOWN_ARROW>;

            label = "WIN_DOWN";
        };

        Alt1: Alt1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_1>;
            label = "ALT1";
        };

        Alt2: Alt2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_2>;
            label = "ALT2";
        };

        Alt3: Alt3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_3>;
            label = "ALT3";
        };

        Alt4: Alt4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_4>;
            label = "ALT4";
        };

        Alt5: Alt5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_5>;
            label = "ALT5";
        };

        Alt6: Alt6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_6>;
            label = "ALT6";
        };

        Alt7: Alt7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_7>;
            label = "ALT7";
        };

        Alt8: Alt8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_8>;
            label = "ALT8";
        };

        Alt9: Alt9 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_9>;
            label = "ALT9";
        };

        Alt00: Alt00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_0>;
            label = "ALT00";
        };

        Alt09: Alt09 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_9>;
            label = "ALT09";
        };

        Alt08: Alt08 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_8>;
            label = "ALT08";
        };

        Alt07: Alt07 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_7>;
            label = "ALT07";
        };

        Alt06: Alt06 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_6>;
            label = "ALT06";
        };

        Alt05: Alt05 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_5>;
            label = "ALT05";
        };

        Alt04: Alt04 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_4>;
            label = "ALT04";
        };

        Alt03: Alt03 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_3>;
            label = "ALT03";
        };

        Alt02: Alt02 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_2>;
            label = "ALT02";
        };

        Alt01: Alt01 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp NUMBER_0 &kp NUMBER_1>;
            label = "ALT01";
        };

        ataiharituke: ataiharituke {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LEFT_ALT &kp H &kp V &kp V>;
            label = "ATAIHARITUKE";
        };

        shift_ctrl_right: shift_ctrl_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp RIGHT_ARROW>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>;

            label = "SHIFT_CTRL_RIGHT";
        };

        shift_ctrl_left: shift_ctrl_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp LEFT_ARROW>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>;

            label = "SHIFT_CTRL_LEFT";
        };

        shift_ctrl_up: shift_ctrl_up {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp UP_ARROW>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>;

            label = "SHIFT_CTRL_UP";
        };

        shift_ctrl_down: shift_ctrl_down {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp DOWN_ARROW>,
                <&macro_release>,
                <&kp LEFT_SHIFT &kp LEFT_CONTROL>;

            label = "SHIFT_CTRL_DOWN";
        };

        new_folder: new_folder {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_CONTROL &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N>,
                <&macro_release>,
                <&kp LEFT_CONTROL &kp LEFT_SHIFT>;

            label = "NEW_FOLDER";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };

        encoder_msc_up_down: encoder_msc_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_ MSC_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <60>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&mt ESC Q           &kp W         &kp E         &kp R                          &kp T                                                                   &kp Y                   &kp U  &kp I      &kp O    &lt 3 P
&mt LEFT_SHIFT A    &kp S         &kp D         &lt 4 F                        &mt LEFT_ALT G          &kp LS(LG(S))                    &kp MINUS      &kp H                   &kp J  &kp K      &kp L    &lt 6 SQT
&mt LEFT_CONTROL Z  &kp X         &kp C         &kp V                          &kp B                   &mt TILDE TAB                    &kp SEMICOLON  &kp N                   &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH
&kp LEFT_CONTROL    &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 5 INT_MUHENKAN  &lt_to_layer_0 2 SPACE  &lt_to_layer_0 3 INT_HENKAN      &kp BACKSPACE  &lt_to_layer_0 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_msc_up_down>;
        };

        FUNCTION {
            bindings = <
&kp EXCLAMATION             &kp QUESTION  &kp AMPERSAND  &kp LEFT_BRACKET      &kp RIGHT_BRACKET                                &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp EQUAL  &kp TILDE  &kp PIPE
&mt LEFT_SHIFT AT_SIGN      &kp HASH      &kp DOLLAR     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER        &kp F11  &kp F6          &kp F7           &kp F8     &kp F9     &kp F10
&mt LEFT_CONTROL BACKSLASH  &kp SLASH     &kp PRCNT      &kp CARET             &kp COLON              &kp INT_YEN      &kp F8   &kp F1          &kp F2           &kp F3     &kp F4     &kp F5
&kp LEFT_CONTROL            &kp LEFT_WIN  &kp LEFT_ALT   &trans                &trans                 &trans           &trans   &trans                                                 &kp F12
            >;

            sensor-bindings = <&inc_dec_kp LC(TAB) LC(LS(TAB))>;
        };

        NUM {
            bindings = <
&kp MINUS               &mkp MB2      &kp LC(F1)        &ataiharituke         &kp PLUS                                                                      &kp PLUS         &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp MINUS
&mt LEFT_SHIFT SLASH    &kp F2        &shift_ctrl_up    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LC(LA(KP_NUMBER_0))      &kp LS(LA(MINUS))         &kp ASTERISK     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp SLASH
&mt LEFT_CONTROL COMMA  &kp F4        &shift_ctrl_down  &shift_ctrl_left      &shift_ctrl_right      &kp PERIOD                   &kp EQUAL                 &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &Doubl_00
&kp LEFT_CONTROL        &kp LEFT_WIN  &kp LEFT_ALT      &trans                &trans                 &trans                       &mt LEFT_SHIFT BACKSPACE  &kp ENTER                                                           &kp COMMA
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        ARROW {
            bindings = <
&kp ESCAPE          &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &Printscreen                                   &Win_up     &Win_left               &kp UP_ARROW    &Win_right               &kp ESC
&mt LEFT_SHIFT END  &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp HOME        &kp LA(F4)        &kp HOME     &Win_down   &kp LEFT                &kp DOWN_ARROW  &kp RIGHT                &kp END
&kp LEFT_CONTROL    &kp LG(LS(LEFT_ARROW))  &Printscreen    &kp LG(LS(RIGHT_ARROW))  &kp LEFT_SHIFT  &kp LEFT_ALT      &kp LA(TAB)  &kp LG(E)   &kp LG(LS(LEFT_ARROW))  &trans          &kp LS(LG(RIGHT_ARROW))  &kp LC(W)
&kp LEFT_CONTROL    &kp LEFT_WIN            &kp LEFT_ALT    &trans                   &trans          &trans            &Win_left    &Win_right                                                                   &kp LA(F4)
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP LC(C_VOLUME_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans              &mkp MB4  &mkp MB5  &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LA(DOWN_ARROW)  &mkp MB1  &mkp MB2  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans              &mkp MB4  &mkp MB5  &mkp MB5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                            &kp DELETE
            >;
        };

        MACRO {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &Alt4  &Alt6   &Alt5  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &Alt06  &Alt01  &Alt2  &Alt7   &Alt3  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &Alt05  &Alt04  &Alt8  &Alt09  &Alt9  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &Alt03  &Alt02                        &trans
            >;
        };

        BLUETOOTH {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans        &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans        &trans        &trans        &trans        &trans  &trans      &bt BT_CLR_ALL  &bt BT_CLR    &trans        &trans        &trans        &trans
&trans        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader     &trans        &trans        &trans        &trans        &KAOname
&trans        &trans        &trans        &trans        &trans  &trans      &trans          &trans                                                  &NewPass
            >;
        };
    };
};
